configfile: "config/config.yaml"

import shutil
import os
import textwrap
import pandas

rule all:
    input:
        lambda wildcards: expand(
            "results/elements/{tnpb}/mafft.fna",
            tnpb=glob_wildcards(os.path.join(checkpoints.link_genomes.get().output.outdir, "{tnpb}/flanking"), followlinks=True).tnpb
        ),
        "results/dedup/merged_rep_seq.fasta",


include: "rules/prepare_genome.smk"
include: "rules/pfam_search.smk"
include: "rules/tnpb_cluster.smk"
include: "rules/build_consensus.smk"
include: "rules/remove_duplicate.smk"


checkpoint link_genomes:
    input:
        meta = expand("results/genomes/{genome}/summary.tsv", genome = config["input"]["genomes"].keys()),
        flanking = expand("results/genomes/{genome}/flanking", genome = config["input"]["genomes"].keys()),
    output:
        outdir=directory("results/genome_links")
    params:
        genomes = expand("results/genomes/{genome}", genome = config["input"]["genomes"].keys()),
    run:
        os.makedirs(f"{output.outdir}", exist_ok=True)
        for meta, genome in zip(input.meta, params.genomes):
            df = pandas.read_table(meta, header=None, usecols=[0, 1, 2, 3])
            df.columns = ["tnpb", "n_copy", "n_tnpa", "passed"]
            for tnpb in df.tnpb[df.passed == "T"]:
                os.symlink(os.path.relpath(genome, start=f"{output.outdir}"), f"{output.outdir}/{tnpb}")
